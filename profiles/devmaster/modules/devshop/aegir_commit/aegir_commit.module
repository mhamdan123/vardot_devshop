<?php

use GitWrapper\GitWrapper;
use GitWrapper\GitWorkingCopy;
use GitWrapper\GitException;
/**
 * Implementation of hook_hosting_tasks()
 */
function aegir_commit_hosting_tasks() {
    $tasks['site']['commit'] = array(
        'title' => t('Commit Code'),
        'description' => t('Commit all or some of the changed files to the git repository.'),
        'dialog' => TRUE,
        'icon' => 'save'
    );
    return $tasks;
}

/**
 * Implements hook_perm()
 * @return array
 */
function aegir_commit_permission() {
    return array(
        'create commit task' => array(
            'title' => t('create commit task'),
            'description' => t('Create "commit code" task.'),
        ),
    );
}

/**
 * @return mixed
 */
function hosting_task_commit_form($node) {

  global $user;
  $environment = $node->environment;
  $options = array();

  try {
    $wrapper = new GitWrapper();
    $git = $wrapper->workingCopy($environment->repo_root);
    $diff_stat = array_filter(explode(PHP_EOL,$wrapper->git('diff --numstat', $environment->repo_root)));
    $status = array_filter(explode(PHP_EOL, $git->getStatus()));

    // Generate list of files
    foreach ($status as &$line) {
      $items = array_filter(explode(' ', trim($line)));
      $file  = array_combine(array('status', 'path'), $items);

      if ($file['status'] == 'A') {
        $options[$file['path']] = '<span class="text-success">Added</span>';
      }
      elseif ($file['status'] == 'M') {
        $options[$file['path']] = '<span class="text-info">Modified</span>';
      }
      elseif ($file['status'] == 'D') {
        $options[$file['path']] = '<span class="text-danger">Deleted</span>';
      }
      elseif ($file['status'] == '??') {
        $options[$file['path']] = '<span class="text-muted">New</span>';
      }
      $options[$file['path']] .= "<code class='text-muted'>{$file['path']}</code>";
    }
  }
  catch (GitException $e) {
    drupal_set_message("Cannot Commit Changes: Unable to load git repository at path '{$environment->repo_root}'. Something is wrong: either the path in the database is wrong, or the files are missing from their intended location.", 'error');
    drupal_set_message($e->getMessage(), 'error');
    drupal_goto("node/{$environment->project_nid}");
  }
  $form['title'] = array(
    '#markup' => '<h3>' . t('Commit Changes') . '</h3>',
  );
  $form['git_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Git Status & Diff'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 100,
    '#prefix' => '<div class="alert alert-info">',
      '#suffix' => t('It is recommended to read the git diff before you commit.') . '</div>',
  );
  $environment->git_status = trim(shell_exec("cd $environment->repo_root; git -c color.ui=always  status"));
  $environment->git_diff = trim(shell_exec("cd $environment->repo_root; git -c color.ui=always diff"));

  $form['git_info']['status'] = array(
    '#type' => 'markup',
    '#markup' => theme('devshop_ascii', array(
        'output' => $environment->git_status
    )),
  );
  $form['git_info']['diff'] = array(
    '#type' => 'markup',
    '#markup' => theme('devshop_ascii', array(
        'output' => $environment->git_diff
    )),
  );
  $form['files'] = array(
    '#description' => t('Check the boxes next to the files you wish to commit.  If you leave all boxes unchecked, all new and changed files will be committed.'),
    '#type' => 'checkboxes',
    '#options' => $options,
    '#element_validate' => array('aegir_commit_validate_files'),
  );
  $form['message'] = array(
    '#title' => t('Message'),
    '#rows' => 2,
    '#type' => 'textarea',
    '#description' => t('A commit message. A small automated timestamp will be added to indicate this was committed by devshop.'),
  );
  $form['push'] = array(
    '#title' => t('Push code after committing.'),
    '#type' => 'checkbox',
    '#default_value' => 1,
  );
  $form['name'] = array(
    '#type' => 'value',
    '#value' => $user->name,
  );
  $form['mail'] = array(
    '#type' => 'value',
    '#value' => $user->mail,
  );
  return $form;
}


/**
 * Converts list of files to json encode for hosting task arguments table.
 * @param $element
 * @param $form_state
 */
function aegir_commit_validate_files($element, &$form_state) {
  if (!empty($element['#value'])) {
    $values = json_encode(array_filter(array_values($element['#value'])));
    form_set_value($element, $values, $form_state);
  }
}

/**
 * Implements hook_devshop_environment_menu().
 *
 * Defines the list of tasks that appear under the gear icon.
 */
function aegir_commit_devshop_environment_menu($environment) {

  if ($environment->site && $environment->site_status == HOSTING_SITE_ENABLED) {
    $items[] = 'commit';
  }
  return $items;
}

/**
 * Implements drush_hook_pre_hosting_task()
 *
 * Runs before the command "hosting-task" is run. Passes "task_args" from
 * the task node into "$task->options" which become drush options.
 */
function drush_aegir_commit_pre_hosting_task()
{
  $task =& drush_get_context('HOSTING_TASK');

  if ($task->task_type != 'commit') {
    return;
  }
  $task->options['files'] = $task->task_args['files'];
  $task->options['message'] = $task->task_args['message'];
  $task->options['push'] = $task->task_args['push'];
  $task->options['name'] = $task->task_args['name'];
  $task->options['mail'] = $task->task_args['mail'];
}

